#!/usr/bin/env python# encoding: utf-8"""rdfstore.pyCreated by George Fazekas on 2012-02-07.Copyright (c) 2012 . All rights reserved."""import rdflibfrom rdflib.graph import Graph, Store, URIRef, Literalfrom rdflib.namespace import Namespace, RDFSfrom rdflib import plugin# NOTE: Please use the RDFlib documentation available at: http://readthedocs.org/docs/rdflib/en/latest/using_graphs.html# An RDF/XML example (taken from: http://www.w3schools.com/rdf/rdf_example.asp)rdf_xml_data = """<?xml version="1.0"?><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"xmlns:cd="http://www.recshop.fake/cd#"><rdf:Description rdf:about="http://www.recshop.fake/cd/Empire Burlesque">  <cd:artist>Bob Dylan</cd:artist>  <cd:country>USA</cd:country>  <cd:company>Columbia</cd:company>  <cd:price>10.90</cd:price>  <cd:year>1985</cd:year></rdf:Description><rdf:Description rdf:about="http://www.recshop.fake/cd/Hide your heart">  <cd:artist>Bonnie Tyler</cd:artist>  <cd:country>UK</cd:country>  <cd:company>CBS Records</cd:company>  <cd:price>9.90</cd:price>  <cd:year>1988</cd:year></rdf:Description></rdf:RDF>"""# -- (part1) create and RDF store in memory --# NOTE: other storage backend types may be Sleepycat (Berkley DB), MySQL, SQLite, etc...memory_store = plugin.get('IOMemory', Store)()# Create an URI identifying the storegraph_id = URIRef(u'http://example.com/foo')# Create an RDF graph using the store and ID defined aboveg = Graph(store=memory_store, identifier=graph_id)# -- (part 2) manually add a triple to the graph --g.add((URIRef(u'http://example.com/bar'), RDFS.label, Literal('bar')))# NOTE: predicat RDFS.label will be extended as a full URI: http://www.w3.org/2000/01/rdf-schema#label# bind a namespace prefix for the example URI referenceg.bind('ex','http://example.com/')# serialise the graph in the Turtle RDF syntaxprint g.serialize(destination=None, format='turtle', base=None, encoding=None)# -- (part 3) parse XML/RDF data provided in a string into the graph store --print "Number of triples in the graph: %i" %len(g)g.parse(data=rdf_xml_data, format="application/rdf+xml")print "Number of triples in the graph after parsing the string: %i" %len(g)# check the actual namespaces bound in the graph store# NOTE: there should be one additional namespace after parsing the stringfor ns in g.namespaces():    print "Prefix: %s => URI: %s" %ns# serialise the graphprint "\nContents of Graph store in Turtle format:\n========================================\n"print g.serialize(destination=None, format='turtle')# manually retrieve the names of artists stored in a graphfor artist in g.objects(subject=None, predicate=URIRef("http://www.recshop.fake/cd#artist")):    print artist