#!/usr/bin/env python# encoding: utf-8"""sparql3-construct.pyCreated by George Fazekas on 2012-02-07.Copyright (c) 2012 . All rights reserved."""import sys,osfrom SPARQLWrapper import SPARQLWrapper, JSON, XMLimport rdflibfrom rdflib.graph import Graphfrom rdflib.namespace import Namespacefrom rdflib import pluginendpoint = SPARQLWrapper("http://dbpedia.org/sparql")# -- (part 1) Build a local RDF graph using a Construct query over DBpedia --# create a construct query template.# NOTE: To keep it simple we create an exact copy matching a query in the local graph.construct_query = '''PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>CONSTRUCT { <%(uri)s> a ?type . <%(uri)s> ?property ?value . <%(uri)s> rdfs:label ?label . ?value rdfs:label ?vlabel . ?property rdfs:label ?plabel . }WHERE {    <%(uri)s> a ?type.    <%(uri)s> ?property ?value .     <%(uri)s> rdfs:label ?label .    ?value rdfs:label ?vlabel .    ?property rdfs:label ?plabel . }'''# set query and substitute an arbitrary URI into the templateendpoint.setQuery(construct_query%{'uri':"http://dbpedia.org/resource/London"})# set the return format to XML,endpoint.setReturnFormat(XML)#NOTE: in this case the query will be parsed into an rdflib graph as opposed to converted into Python dictionaries# execute the querygraph = endpoint.query().convert()# list all triples to verify the RDF graphfor s,p,o in graph:    print repr(s),repr(p),repr(o)# -- (part 2) query the resulting RDF graph --# register the SPARQL plugin for rdflibplugin.register(    'sparql', rdflib.query.Processor,    'rdfextras.sparql.processor', 'Processor')plugin.register(    'sparql', rdflib.query.Result,    'rdfextras.sparql.query', 'SPARQLQueryResult')# language tag, change it to see the results in Spanish, rather than in English:Language = "en"# Language = "es"# query the model constructed by the previous CONSTRUCT query.query = graph.query("""PREFIX dbpo: <http://dbpedia.org/ontology/>PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>SELECT DISTINCT ?location ?party ?leaderWHERE {    <http://dbpedia.org/resource/London> rdfs:label ?location .    <http://dbpedia.org/resource/London> dbpo:leaderName ?leaderResource .    ?leaderResource rdfs:label ?leader .    <http://dbpedia.org/resource/London> dbpo:leaderParty ?partyResource .    ?partyResource rdfs:label ?party .FILTER( LANG(?location)="%(lang)s" && LANG(?party)="%(lang)s" && LANG(?leader)="%(lang)s") . }""" %{'lang':Language})# print the resultsprint "RESULTS:"for row in query.result:    print("The leader party of %s is %s who's leader is %s." % repr(row))# You may also make use of these prexixes in more complex DBpedia queries:# PREFIX dbpr: <http://dbpedia.org/resource/># PREFIX dbpp: <http://dbpedia.org/property/> 